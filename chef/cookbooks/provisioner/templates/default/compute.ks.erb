# Kickstart file automatically generated by anaconda.

install
url --url <%= @admin_web %>
key --skip
lang en_US.UTF-8
keyboard us
# crowbar
<% if node[:provisioner][:default_password_hash] -%>
rootpw --iscrypted <%= node[:provisioner][:default_password_hash] %>
<% else -%>
rootpw <%= node[:provisioner][:default_password] %>
<% end -%>
firewall --disabled
authconfig --enableshadow --enablemd5
selinux --disabled
timezone --utc Europe/London

%include /tmp/diskpart

text
reboot

%packages
@base
@core
<% if node[:platform_version].to_f >= 6 -%>
vim-enhanced
<% else -%>
@editors
@text-internet
<% end -%>
keyutils
trousers
fipscheck
device-mapper-multipath
OpenIPMI
OpenIPMI-tools
emacs-nox
openssh
curl.x86_64
ntp


%pre
#!/bin/bash

exec > /tmp/pre-install.log 2>&1
set -x -v

while : ; do
  sleep 10
  if [ -d /mnt/sysimage/root ]; then
    cp /tmp/pre-install.log /mnt/sysimage/root/
    break
  fi
done &

# Go get curl
cd /tmp
wget http://<%= @admin_node_ip %>:<%= @web_port %>/curl/curl
chmod ugo+x ./curl

# Get the authentication key
key_re='crowbar\.install\.key=([^ ]+)'
if [[ $(cat /proc/cmdline) =~ $key_re ]]; then
    export CROWBAR_KEY="${BASH_REMATCH[1]}"
else
    echo "Unable to find corwbar.install.key parameter: $(cat /proc/cmdline)"
    exit
fi

local curlargs=(-o /tmp/diskpart --connect-timeout 60 -s -L -X GET --max-time 240 -u "$CROWBAR_KEY" --digest --anyauth)
./curl "${curlargs[@]}" "http://<%= @admin_node_ip %>:3000/crowbar/provisioner/1.0/get_kickstart/default?name=$(hostname)"

sleep 240


%post

exec > /root/post-install.log 2>&1
set -x
export PS4='${BASH_SOURCE}@${LINENO}(${FUNCNAME[0]}): '
(cd /etc/yum.repos.d && rm *)
<% @repos.each do |repo,url| -%>
cat >/etc/yum.repos.d/crowbar-<%=repo%>.repo <<EOF
[crowbar-<%=repo%>]
name=Crowbar <%=repo%> Repo
<%=url%>
gpgcheck=0
EOF
<% end %>

HTTP_SERVER="<%= @admin_node_ip %>:<%= @web_port %>"
IP="<%= @admin_node_ip %>"
HOSTNAME=$(hostname -f)

key_re='crowbar\.install\.key=([^ ]+)'
if [[ $(cat /proc/cmdline) =~ $key_re ]]; then
    export CROWBAR_KEY="${BASH_REMATCH[1]}"
    echo "$CROWBAR_KEY" >/etc/crowbar.install.key
elif [[ -f /etc/crowbar.install.key ]]; then
    export CROWBAR_KEY="$(cat /etc/crowbar.install.key)"
fi

post_state() {
  local curlargs=(-o "/var/log/$1-$2.json" --connect-timeout 60 -s \
      -L -X POST --data-binary "{ \"name\": \"$1\", \"state\": \"$2\" }" \
      -H "Accept: application/json" -H "Content-Type: application/json" \
      --max-time 240)
  [[ $CROWBAR_KEY ]] && curlargs+=(-u "$CROWBAR_KEY" --digest --anyauth)
  curl "${curlargs[@]}" "http://$IP:3000/crowbar/crowbar/1.0/transition/default"
}

post_state $HOSTNAME "installing"

#"Blacklisting IPv6".
echo "blacklist ipv6" >>/etc/modprobe.d/blacklist-ipv6.conf
echo "options ipv6 disable=1" >>/etc/modprobe.d/blacklist-ipv6.conf

rsyslog_dir="/etc/rsyslog.d"
mkdir -p "$rsyslog_dir"
echo '$IncludeConfig /etc/rsyslog.d/*.conf' >>/etc/rsyslog.conf
if [ ! -f "$rsyslog_dir/10-crowbar-client.conf" ]; then
    echo "*.* @@${IP}" > "$rsyslog_dir/10-crowbar-client.conf"
    if ! curl -f -s -o "$rsyslog_dir/00-crowbar-debug.conf" \
        <%= @admin_web %>/rsyslog.d/00-crowbar-debug.conf
    then
        rm -f "$rsyslog_dir/00-crowbar-debug.conf"
    fi
fi

mkdir -p /root/.ssh
chmod 700 /root/.ssh
if ! curl -s -o /root/.ssh/authorized_keys.wget \
    http://$HTTP_SERVER/authorized_keys; then
    rm -f /root/.ssh/authorized_keys.wget
else
    chmod 644 /root/.ssh/authorized_keys
    cat /root/.ssh/authorized_keys.wget >>/root/.ssh/authorized_keys
    rm -f /root/.ssh/authorized_keys.wget
fi

curl -s -o /etc/init.d/crowbar_join.sh <%= @crowbar_join %>
chmod +x /etc/init.d/crowbar_join.sh
ln -s /etc/init.d/crowbar_join.sh /etc/rc3.d/S80crowbar
ln -s /etc/init.d/crowbar_join.sh /etc/rc5.d/S80crowbar
ln -s /etc/init.d/crowbar_join.sh /etc/rc2.d/S80crowbar

# boot to runlevel 3 by default
sed -i -e '/initdefault/ s/5/3/' /etc/inittab

sleep 30

post_state $HOSTNAME "installed"

# Wait for DHCP to update - this is mainly for virtual environments or really large deploys
sleep 30
sync
